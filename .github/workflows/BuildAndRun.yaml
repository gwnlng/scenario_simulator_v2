name: Build and run

on:
  workflow_dispatch:
  schedule:
    - cron: 0 0 * * *
  pull_request:
    paths:
      - "**"
      - "!docs/**"
      - "!README.md"
      - "!CONTRIBUTING.md"
      - "!.github/**"
      - ".github/workflows/BuildAndRun.yaml"
      - "!mkdocs.yml"
      - "!pyproject.toml"
      - "!poetry.lock"
  push:
    branches:
      - master
jobs:
  job1:
    name: BuildAndRun
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 180
    container: ros:${{ matrix.rosdistro }}
    environment: matrix
    env:
      ORG_ID: ${{ matrix.SNYK_ORG }}
      SNYK_TOKEN: "${{ secrets.SNYK_TOKEN }}"
      DEBIAN_FRONTEND: noninteractive
    strategy:
      fail-fast: false
      matrix:
        rosdistro: [humble]
        runs_on: [ubuntu-22.04] # macos-14 is added for arm support. See also https://x.com/github/status/1752458943245189120?s=20
    steps:
      - name: Suppress warnings
        run: git config --global --add safe.directory '*'

      - name: Setup workspace
        run: mkdir -p src/scenario_simulator_v2

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: src/scenario_simulator_v2

      - uses: actions/checkout@v4
        with:
          repository: RobotecAI/scenario_simulator_v2_scenarios
          path: src/scenario_simulator_v2_scenarios

      - name: Search packages in this repository
        id: list_packages
        run: |
          echo package_list=$(colcon list --names-only | tr '\n' ' ' | cut -d ' ' -f 1) >> $GITHUB_OUTPUT

      - name: Show target packages
        run: |
          echo "Target packages: ${{ steps.list_packages.outputs.package_list }}"

      - name: Install dependencies
        run: |
          vcs import src < src/scenario_simulator_v2/dependency_${{ matrix.rosdistro }}.repos

      - name: install utilities
        run: |
          apt-get update
          apt-get install -y zip npm
          npm install snyk -g
          snyk auth ${{secrets.SNYK_TOKEN}}          
        shell: bash
        
#      - name: Resolve rosdep
#        run: |
#          apt-get update
#          apt-get install -y python3-pip
#          rosdep update --include-eol-distros
#          rosdep install -iy --from-paths src --rosdistro ${{ matrix.rosdistro }}
#        shell: bash

      - name: list files
        run: |
          pwd
          find /__w/ -type f \( -name "*.h" -o -name "*.hpp" -o -name "*.cpp" \) | xargs zip /tmp/my_CPP_Step01.zip
        shell: bash
        
      - name: unzip the file and snyk scan
        run: |
          mkdir -p /tmp/my_CPP_Step01
          cd /tmp/my_CPP_Step01
          unzip /tmp/my_CPP_Step01.zip
          snyk test --unmanaged --org=${ORG_ID} --max-depth=18 --detection-depth=18 || true
          snyk monitor --unmanaged --org=${ORG_ID} --max-depth=18 --detection-depth=18 --target-reference=scenario_simulator_v2_step01 --remote-repo-url=https://github.com/tier4/scenario_simulator_v2
        shell: bash
       
      - name: Build packages
        run: |
          source /opt/ros/${{ matrix.rosdistro }}/setup.bash
          colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release -DBUILD_CPP_MOCK_SCENARIOS=ON --packages-up-to ${{ steps.list_packages.outputs.package_list }}
        shell: bash

      - name: list files
        run: |
          pwd
          find /__w/ -type f \( -name "*.h" -o -name "*.hpp" -o -name "*.cpp" \) | xargs /tmp/zip my_CPP_Step02.zip
        shell: bash
        
      - name: unzip the file and snyk scan
        run: |
          mkdir -p /tmp/my_CPP_Step02
          cd /tmp/my_CPP_Step02
          unzip /tmp/my_CPP_Step02.zip
          snyk test --unmanaged --org=${ORG_ID} --max-depth=18 --detection-depth=18 || true
          snyk monitor --unmanaged --org=${ORG_ID} --max-depth=18 --detection-depth=18 --target-reference=scenario_simulator_v2_step02 --remote-repo-url=https://github.com/tier4/scenario_simulator_v2
        shell: bash
       
      - name: Colcon test
        run: |
          source /opt/ros/${{ matrix.rosdistro }}/setup.bash
          source install/local_setup.bash
          colcon test --packages-select ${{ steps.list_packages.outputs.package_list }}
        shell: bash

      - name: Show test result
        if: always()
        run: |
          source /opt/ros/${{ matrix.rosdistro }}/setup.bash
          source install/local_setup.bash
          colcon test-result --verbose
        shell: bash

#      - name: Scenario test
#        run: |
#          source install/setup.bash
#          source install/local_setup.bash
#          ./src/scenario_simulator_v2/.github/workflows/workflow.sh ./src/scenario_simulator_v2/test_runner/scenario_test_runner/config/workflow.txt global_frame_rate:=20
#        shell: bash

      - name: list files
        run: |
          pwd
          find /__w/ -type f \( -name "*.h" -o -name "*.hpp" -o -name "*.cpp" \) | xargs zip /tmp/my_CPP_Step03.zip
        shell: bash

      - name: unzip the file and snyk scan
        run: |
          mkdir -p /tmp/my_CPP_Step02
          cd /tmp/my_CPP_Step02
          unzip /tmp/my_CPP_Step02.zip
          snyk test --unmanaged --org=${ORG_ID} --max-depth=18 --detection-depth=18 || true
          snyk monitor --unmanaged --org=${ORG_ID} --max-depth=18 --detection-depth=18 --target-reference=scenario_simulator_v2_step03 --remote-repo-url=https://github.com/tier4/scenario_simulator_v2
        shell: bash
        
      - name: Snyk test
        uses: snyk/actions/node@master
        continue-on-error: false # To make sure that the initial implementation would not stop the ci build
        with:
          args: --unmanaged --org=${ORG_ID} --max-depth=18 --detection-depth=18 ../

      - name: Snyk monitor
        uses: snyk/actions/node@master
        continue-on-error: false # To make sure that the initial implementation would capture all OSS info
        with:
          command: monitor
          args: --unmanaged --org=${ORG_ID} --max-depth=18 --detection-depth=18 ../

#      - name: Basic test
#        run: |
#          source install/setup.bash
#          source install/local_setup.bash
#          ./src/scenario_simulator_v2/.github/workflows/workflow.sh ./src/scenario_simulator_v2_scenarios/workflow/basic.txt
#        shell: bash
